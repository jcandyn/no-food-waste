<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Food Analytics</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
</head>
<body>
    <h1>Food Analytics for {{ name }}</h1>

    <!-- Bar chart for expiry status -->
    <div id="expiryStatusChart"></div>

    <!-- Bar chart for units -->
    <div id="unitChart"></div>

    <!-- Bar chart for categories -->
    <div id="categoryChart"></div>

      <div id="chart"></div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
              const foodItems = JSON.parse('{{{foodItems}}}');
            const units = JSON.parse('{{{units}}}');
            const status = JSON.parse('{{{status}}}');
            const data = JSON.parse('{{{data}}}');


            const allFruits = Array.from(new Set(data.flatMap(obj => Object.keys(obj).filter(key => key !== 'month'))));

// Update each row to include all fruits with 0 value if missing
data.forEach(row => {
  allFruits.forEach(fruit => {
    if (!row.hasOwnProperty(fruit)) {
      row[fruit] = 0;
    }
  });
});

            console.log("foodItems: ", foodItems);
           
     const margin = { top: 20, right: 20, bottom: 50, left: 50 };
        const titleMargin = 20;
        const labelMargin = 15;

        const width = 600 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;
        const legendHeight = 30;

        const svg = d3.select('#chart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom + legendHeight)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);
    

    const fruit = Object.keys(data[0]).filter(d => d != "month");
    const months = data.map(d => d.month);

    const stackedData = d3.stack()
        .keys(fruit)(data);

    const xMax = d3.max(stackedData[stackedData.length - 1], d => d[1]);

    // scales


    const x = d3.scaleLinear()
        .domain([0, xMax]).nice()
        .range([0, width]);

    const y = d3.scaleBand()
        .domain(months)
        .range([0, height])
        .padding(0.25);

    const color = d3.scaleOrdinal()
        .domain(fruit)
        .range(d3.schemeTableau10);

    // axes

    const xAxis = d3.axisBottom(x).ticks(5, '~s');
    const yAxis = d3.axisLeft(y);

    svg.append('g')
        .attr('transform', `translate(0,${height})`)
        .call(xAxis)
        .call(g => g.select('.domain').remove());


    svg.append("g")
        .call(yAxis)
        .call(g => g.select('.domain').remove());

    // draw bars

    // create one group for each fruit
    const layers = svg.append('g')
      .selectAll('g')
      .data(stackedData)
      .join('g')
        .attr('fill', d => color(d.key));

    // transition for bars
    const duration = 250 * data.length;
    const t = d3.transition()
        .duration(duration)
        .ease(d3.easeLinear);

    layers.each(function(_, i) {
      // this refers to the group for a given fruit
      d3.select(this)
        .selectAll('rect')
        .data(d => d)
        .join('rect')
          .attr('x', d => x(d[0]))
          .attr('y', d => y(d.data.month))
          .attr('height', y.bandwidth())
        .transition(t)
          // i is the index of this fruit.
          // this will give the bars for each fruit a different delay
          // so that the fruits will be revealed one at a time.
          // using .each() instead of a normal data join is needed
          // so that we have access to what fruit each bar belongs to.
          .delay(i * duration)
          .attr('width', d => x(d[1]) - x(d[0]));

          //add legend
          const legend = svg
            .append("g")
            .attr("class", "legend")
            .attr("transform", `translate(0,${height + legendHeight})`);

const legendItems = legend
  .selectAll(".legend-item")
  .data(fruit)
  .enter()
  .append("g")
  .attr("class", "legend-item")
  .attr("transform", (d, i) => `translate(${i * 100}, 0)`); // Adjust the spacing here

legendItems
  .append("rect")
  .attr("width", 20)
  .attr("height", 20)
  .attr("fill", (d) => color(d));

legendItems
  .append("text")
  .attr("x", 25)
  .attr("y", 15)
  .text((d) => d);
        });

    const barTitle = 'Monthly Food Expirations';

        svg.append('text')
            .attr('x', width / 2)
            .attr('y', 0)
            .attr('text-anchor', 'middle')
            .style('font-size', '16px')
            .text(barTitle);



        /**
        */

        const weeklyExpirations = [
        { week: 1, count: 10 },
        { week: 2, count: 15 },
        { week: 3, count: 8 },
        { week: 4, count: 12 },
        // Add more data as needed
    ];

   
    // Create a separate SVG for the line chart
        const lineChartMarginTop = 15; // Adjust the margin as needed
        const lineChart = d3
            .select('#chart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top + lineChartMarginTop})`);

    // Scales for the line chart
    const xLine = d3.scaleBand().domain(weeklyExpirations.map((d) => d.week)).range([0, width]).padding(0.1);
    const yLine = d3.scaleLinear().domain([0, d3.max(weeklyExpirations, (d) => d.count)]).range([height, 0]);

    // Line function
    const line = d3
        .line()
        .x((d) => xLine(d.week) + xLine.bandwidth() / 2)
        .y((d) => yLine(d.count));

    // Draw the line chart
    lineChart
        .append('path')
        .datum(weeklyExpirations)
        .attr('fill', 'none')
        .attr('stroke', 'steelblue')
        .attr('stroke-width', 2)
        .attr('d', line);

    // Draw the y-axis
    lineChart.append('g').call(d3.axisLeft(yLine));

    // Draw the x-axis with labels
      lineChart
        .append('g')
        .attr('transform', `translate(0,${height})`)
        .call(d3.axisBottom(xLine))
        .selectAll('.tick text')
        .attr('dy', '1.5em') // Adjust the y-coordinate based on your preference
        .style('text-anchor', 'middle')
        .text((d) => `Week ${d}`);


        // title 
         lineChart
            .append('text')
            .attr('x', width / 2)
            .attr('y', -titleMargin)
            .attr('text-anchor', 'middle')
            .style('font-size', '16px')
            .text('Expirations this month: Weekly');
    });
    

    </script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
</body>
</html>
